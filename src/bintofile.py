import base64

base64_message = "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"
base64_bytes = base64_message.encode("utf-8")
message_bytes = base64.b64decode(base64_bytes)


def bin_to_file():
    with open("docs/file.xlsx", "bw") as filepdf:
        filepdf.write(message_bytes)


if __name__ == "__main__":
    bin_to_file()
